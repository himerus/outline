{"version":3,"file":"outline-container.js","sourceRoot":"","sources":["outline-container.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAkC,MAAM,KAAK,CAAC;AAC3D,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,eAAe,MAAM,6BAA6B,CAAC;AAE1D,+CAA+C;AAC/C,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAGtD;;;;;;;;;GASG;AAEH,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,cAAc;IAApD;;QAGE;;WAEG;QAMH,aAAQ,GAAG,KAAK,CAAC;QAEjB;;WAEG;QAMH,aAAQ,GAAG,KAAK,CAAC;QAEjB;;WAEG;QAMH,cAAS,GAAG,KAAK,CAAC;QAElB;;WAEG;QAMH,mBAAc,GAAwB,QAAQ,CAAC;IAQjD,CAAC;IANC;;OAEG;IACH,MAAM;QACJ,OAAO,IAAI,CAAA,eAAe,CAAC;IAC7B,CAAC;CACF,CAAA;AAhDQ,uBAAM,GAAmB,CAAC,aAAa,EAAE,eAAe,CAAE,CAAA;AAUjE;IALC,QAAQ,CAAC;QACR,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,WAAW;KACvB,CAAC;kDACe;AAUjB;IALC,QAAQ,CAAC;QACR,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,WAAW;KACvB,CAAC;kDACe;AAUjB;IALC,QAAQ,CAAC;QACR,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,YAAY;KACxB,CAAC;mDACgB;AAUlB;IALC,QAAQ,CAAC;QACR,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,iBAAiB;KAC7B,CAAC;wDAC6C;AAzCpC,gBAAgB;IAD5B,aAAa,CAAC,mBAAmB,CAAC;GACtB,gBAAgB,CAiD5B;SAjDY,gBAAgB","sourcesContent":["import { html, TemplateResult, CSSResultGroup } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport componentVars from './css-variables/vars-container.css.lit';\nimport componentStyles from './outline-container.css.lit';\n\n// Our base component, which all others extend.\nimport { OutlineElement } from '@phase2/outline-core';\nimport type { HorizontalAlignment } from '@phase2/outline-core';\n\n/**\n * The Outline  Link component\n * @element outline-link\n * @extends OutlineElement\n * @slot - The default slot for this element.\n * @cssprop --outline-container-padding-x: The horizontal padding for the container.\n * @cssprop --outline-container-padding-y: The vertical padding for the container.\n * @todo: Cleanup default responsive CSS styling and Tailwind CSS usage.\n * @todo: Implement a method for 'simplified' media queries.\n */\n@customElement('outline-container')\nexport class OutlineContainer extends OutlineElement {\n  static styles: CSSResultGroup = [componentVars, componentStyles];\n\n  /**\n   * Whether or not this container has padding.\n   */\n  @property({\n    type: Boolean,\n    reflect: true,\n    attribute: 'x-padding',\n  })\n  xPadding = false;\n\n  /**\n   * Whether or not this container has padding.\n   */\n  @property({\n    type: Boolean,\n    reflect: true,\n    attribute: 'y-padding',\n  })\n  yPadding = false;\n\n  /**\n   * Whether or not this is a full bleed container.\n   */\n  @property({\n    type: Boolean,\n    reflect: true,\n    attribute: 'full-bleed',\n  })\n  fullBleed = false;\n\n  /**\n   * The horizontal position of the container.\n   */\n  @property({\n    type: String,\n    reflect: true,\n    attribute: 'container-align',\n  })\n  containerAlign: HorizontalAlignment = 'center';\n\n  /**\n   * Return the container element.\n   */\n  render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'outline-container': OutlineContainer;\n  }\n}\n"]}